// file: IPOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package com.ktu.ontology;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: IPOntology.java
 * @author ontology bean generator
 * @version 2024/05/19, 15:32:28
 */
public class IPOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 2018774048610738269L;

  //NAME
  public static final String ONTOLOGY_NAME = "IP";
  // The singleton instance of this ontology
  private static Ontology theInstance = new IPOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String BRAIN_IP_CLASS9="IP_Class9";
    public static final String BRAIN="Brain";
    public static final String ENVIRONMENT_ROBOTX="RobotX";
    public static final String ENVIRONMENT_ROBOTY="RobotY";
    public static final String ENVIRONMENT_N="N";
    public static final String ENVIRONMENT_GRID="Grid";
    public static final String ENVIRONMENT="Environment";
    public static final String ACTUATOR_MOVEQUEUE="MoveQueue";
    public static final String ACTUATOR="Actuator";
    public static final String SENSOR_VISIONRADIUS="VisionRadius";
    public static final String SENSOR_GRIDSUBSET="GridSubset";
    public static final String SENSOR="Sensor";

  /**
   * Constructor
  */
  private IPOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema sensorSchema = new ConceptSchema(SENSOR);
    add(sensorSchema, com.ktu.ontology.Sensor.class);
    ConceptSchema actuatorSchema = new ConceptSchema(ACTUATOR);
    add(actuatorSchema, com.ktu.ontology.Actuator.class);
    ConceptSchema environmentSchema = new ConceptSchema(ENVIRONMENT);
    add(environmentSchema, com.ktu.ontology.Environment.class);
    ConceptSchema brainSchema = new ConceptSchema(BRAIN);
    add(brainSchema, com.ktu.ontology.Brain.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    sensorSchema.add(SENSOR_GRIDSUBSET, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    sensorSchema.add(SENSOR_VISIONRADIUS, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    actuatorSchema.add(ACTUATOR_MOVEQUEUE, (TermSchema)getSchema(BasicOntology.STRING), 1, 20);
    environmentSchema.add(ENVIRONMENT_GRID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    environmentSchema.add(ENVIRONMENT_N, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    environmentSchema.add(ENVIRONMENT_ROBOTY, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    environmentSchema.add(ENVIRONMENT_ROBOTX, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    brainSchema.add(BRAIN_IP_CLASS9, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
